datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  Root
  Admin
  User
}

enum Rating {
  Good
  Bad
  Netural
}

enum Status {
  New
  Old
  Used
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  password      String
  verified      Boolean   @default(false)
  role          Role      @default(User)
  name          String
  image         String?
  phone         String?
  whatsup       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  views         Int       @default(0)
  comments      Comment[]
  Items         Item[]
  stateId       String    @db.ObjectId
  state         State     @relation(fields: [stateId], references: [id])
  pinnedItemIds String[]  @db.ObjectId
  pinnedItems   Item[]    @relation("pinnedItems", fields: [pinnedItemIds], references: [id])

  @@index([name])
}

model Item {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  price         Float
  status        Status
  previousPrice Float?
  image         String?
  images        String[]  @default([])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  soldAt        DateTime?
  sold          Boolean   @default(false)
  views         Int       @default(0)
  comments      Comment[]
  state         State     @relation(fields: [stateId], references: [id])
  stateId       String    @db.ObjectId
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String    @db.ObjectId
  pinnedBys     User[]    @relation("pinnedItems", fields: [pinnedByIds], references: [id])
  pinnedByIds   String[]  @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId

  @@index([status, price, views, sold])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  rating    Rating
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  itemId    String   @db.ObjectId
  userId    String   @db.ObjectId
  item      Item     @relation(fields: [itemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model State {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  user  User[]
  items Item[]
}

model Category {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  image String?
  Item  Item[]
}
